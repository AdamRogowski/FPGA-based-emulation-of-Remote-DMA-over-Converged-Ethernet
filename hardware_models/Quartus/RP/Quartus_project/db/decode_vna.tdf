--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Stratix V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_vna
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode23551w[1..0]	: WIRE;
	w_anode23560w[3..0]	: WIRE;
	w_anode23577w[3..0]	: WIRE;
	w_anode23587w[3..0]	: WIRE;
	w_anode23597w[3..0]	: WIRE;
	w_anode23607w[3..0]	: WIRE;
	w_anode23617w[3..0]	: WIRE;
	w_anode23627w[3..0]	: WIRE;
	w_anode23637w[3..0]	: WIRE;
	w_anode23649w[1..0]	: WIRE;
	w_anode23656w[3..0]	: WIRE;
	w_anode23667w[3..0]	: WIRE;
	w_anode23677w[3..0]	: WIRE;
	w_anode23687w[3..0]	: WIRE;
	w_anode23697w[3..0]	: WIRE;
	w_anode23707w[3..0]	: WIRE;
	w_anode23717w[3..0]	: WIRE;
	w_anode23727w[3..0]	: WIRE;
	w_data23549w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode23727w[3..3], w_anode23717w[3..3], w_anode23707w[3..3], w_anode23697w[3..3], w_anode23687w[3..3], w_anode23677w[3..3], w_anode23667w[3..3], w_anode23656w[3..3]), ( w_anode23637w[3..3], w_anode23627w[3..3], w_anode23617w[3..3], w_anode23607w[3..3], w_anode23597w[3..3], w_anode23587w[3..3], w_anode23577w[3..3], w_anode23560w[3..3]));
	w_anode23551w[] = ( (w_anode23551w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode23560w[] = ( (w_anode23560w[2..2] & (! w_data23549w[2..2])), (w_anode23560w[1..1] & (! w_data23549w[1..1])), (w_anode23560w[0..0] & (! w_data23549w[0..0])), w_anode23551w[1..1]);
	w_anode23577w[] = ( (w_anode23577w[2..2] & (! w_data23549w[2..2])), (w_anode23577w[1..1] & (! w_data23549w[1..1])), (w_anode23577w[0..0] & w_data23549w[0..0]), w_anode23551w[1..1]);
	w_anode23587w[] = ( (w_anode23587w[2..2] & (! w_data23549w[2..2])), (w_anode23587w[1..1] & w_data23549w[1..1]), (w_anode23587w[0..0] & (! w_data23549w[0..0])), w_anode23551w[1..1]);
	w_anode23597w[] = ( (w_anode23597w[2..2] & (! w_data23549w[2..2])), (w_anode23597w[1..1] & w_data23549w[1..1]), (w_anode23597w[0..0] & w_data23549w[0..0]), w_anode23551w[1..1]);
	w_anode23607w[] = ( (w_anode23607w[2..2] & w_data23549w[2..2]), (w_anode23607w[1..1] & (! w_data23549w[1..1])), (w_anode23607w[0..0] & (! w_data23549w[0..0])), w_anode23551w[1..1]);
	w_anode23617w[] = ( (w_anode23617w[2..2] & w_data23549w[2..2]), (w_anode23617w[1..1] & (! w_data23549w[1..1])), (w_anode23617w[0..0] & w_data23549w[0..0]), w_anode23551w[1..1]);
	w_anode23627w[] = ( (w_anode23627w[2..2] & w_data23549w[2..2]), (w_anode23627w[1..1] & w_data23549w[1..1]), (w_anode23627w[0..0] & (! w_data23549w[0..0])), w_anode23551w[1..1]);
	w_anode23637w[] = ( (w_anode23637w[2..2] & w_data23549w[2..2]), (w_anode23637w[1..1] & w_data23549w[1..1]), (w_anode23637w[0..0] & w_data23549w[0..0]), w_anode23551w[1..1]);
	w_anode23649w[] = ( (w_anode23649w[0..0] & data_wire[3..3]), enable_wire);
	w_anode23656w[] = ( (w_anode23656w[2..2] & (! w_data23549w[2..2])), (w_anode23656w[1..1] & (! w_data23549w[1..1])), (w_anode23656w[0..0] & (! w_data23549w[0..0])), w_anode23649w[1..1]);
	w_anode23667w[] = ( (w_anode23667w[2..2] & (! w_data23549w[2..2])), (w_anode23667w[1..1] & (! w_data23549w[1..1])), (w_anode23667w[0..0] & w_data23549w[0..0]), w_anode23649w[1..1]);
	w_anode23677w[] = ( (w_anode23677w[2..2] & (! w_data23549w[2..2])), (w_anode23677w[1..1] & w_data23549w[1..1]), (w_anode23677w[0..0] & (! w_data23549w[0..0])), w_anode23649w[1..1]);
	w_anode23687w[] = ( (w_anode23687w[2..2] & (! w_data23549w[2..2])), (w_anode23687w[1..1] & w_data23549w[1..1]), (w_anode23687w[0..0] & w_data23549w[0..0]), w_anode23649w[1..1]);
	w_anode23697w[] = ( (w_anode23697w[2..2] & w_data23549w[2..2]), (w_anode23697w[1..1] & (! w_data23549w[1..1])), (w_anode23697w[0..0] & (! w_data23549w[0..0])), w_anode23649w[1..1]);
	w_anode23707w[] = ( (w_anode23707w[2..2] & w_data23549w[2..2]), (w_anode23707w[1..1] & (! w_data23549w[1..1])), (w_anode23707w[0..0] & w_data23549w[0..0]), w_anode23649w[1..1]);
	w_anode23717w[] = ( (w_anode23717w[2..2] & w_data23549w[2..2]), (w_anode23717w[1..1] & w_data23549w[1..1]), (w_anode23717w[0..0] & (! w_data23549w[0..0])), w_anode23649w[1..1]);
	w_anode23727w[] = ( (w_anode23727w[2..2] & w_data23549w[2..2]), (w_anode23727w[1..1] & w_data23549w[1..1]), (w_anode23727w[0..0] & w_data23549w[0..0]), w_anode23649w[1..1]);
	w_data23549w[2..0] = data_wire[2..0];
END;
--VALID FILE
