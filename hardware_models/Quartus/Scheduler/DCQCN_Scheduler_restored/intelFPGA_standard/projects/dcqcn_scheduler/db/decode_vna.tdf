--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Stratix V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_vna
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode13269w[1..0]	: WIRE;
	w_anode13278w[3..0]	: WIRE;
	w_anode13295w[3..0]	: WIRE;
	w_anode13305w[3..0]	: WIRE;
	w_anode13315w[3..0]	: WIRE;
	w_anode13325w[3..0]	: WIRE;
	w_anode13335w[3..0]	: WIRE;
	w_anode13345w[3..0]	: WIRE;
	w_anode13355w[3..0]	: WIRE;
	w_anode13367w[1..0]	: WIRE;
	w_anode13374w[3..0]	: WIRE;
	w_anode13385w[3..0]	: WIRE;
	w_anode13395w[3..0]	: WIRE;
	w_anode13405w[3..0]	: WIRE;
	w_anode13415w[3..0]	: WIRE;
	w_anode13425w[3..0]	: WIRE;
	w_anode13435w[3..0]	: WIRE;
	w_anode13445w[3..0]	: WIRE;
	w_data13267w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode13445w[3..3], w_anode13435w[3..3], w_anode13425w[3..3], w_anode13415w[3..3], w_anode13405w[3..3], w_anode13395w[3..3], w_anode13385w[3..3], w_anode13374w[3..3]), ( w_anode13355w[3..3], w_anode13345w[3..3], w_anode13335w[3..3], w_anode13325w[3..3], w_anode13315w[3..3], w_anode13305w[3..3], w_anode13295w[3..3], w_anode13278w[3..3]));
	w_anode13269w[] = ( (w_anode13269w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode13278w[] = ( (w_anode13278w[2..2] & (! w_data13267w[2..2])), (w_anode13278w[1..1] & (! w_data13267w[1..1])), (w_anode13278w[0..0] & (! w_data13267w[0..0])), w_anode13269w[1..1]);
	w_anode13295w[] = ( (w_anode13295w[2..2] & (! w_data13267w[2..2])), (w_anode13295w[1..1] & (! w_data13267w[1..1])), (w_anode13295w[0..0] & w_data13267w[0..0]), w_anode13269w[1..1]);
	w_anode13305w[] = ( (w_anode13305w[2..2] & (! w_data13267w[2..2])), (w_anode13305w[1..1] & w_data13267w[1..1]), (w_anode13305w[0..0] & (! w_data13267w[0..0])), w_anode13269w[1..1]);
	w_anode13315w[] = ( (w_anode13315w[2..2] & (! w_data13267w[2..2])), (w_anode13315w[1..1] & w_data13267w[1..1]), (w_anode13315w[0..0] & w_data13267w[0..0]), w_anode13269w[1..1]);
	w_anode13325w[] = ( (w_anode13325w[2..2] & w_data13267w[2..2]), (w_anode13325w[1..1] & (! w_data13267w[1..1])), (w_anode13325w[0..0] & (! w_data13267w[0..0])), w_anode13269w[1..1]);
	w_anode13335w[] = ( (w_anode13335w[2..2] & w_data13267w[2..2]), (w_anode13335w[1..1] & (! w_data13267w[1..1])), (w_anode13335w[0..0] & w_data13267w[0..0]), w_anode13269w[1..1]);
	w_anode13345w[] = ( (w_anode13345w[2..2] & w_data13267w[2..2]), (w_anode13345w[1..1] & w_data13267w[1..1]), (w_anode13345w[0..0] & (! w_data13267w[0..0])), w_anode13269w[1..1]);
	w_anode13355w[] = ( (w_anode13355w[2..2] & w_data13267w[2..2]), (w_anode13355w[1..1] & w_data13267w[1..1]), (w_anode13355w[0..0] & w_data13267w[0..0]), w_anode13269w[1..1]);
	w_anode13367w[] = ( (w_anode13367w[0..0] & data_wire[3..3]), enable_wire);
	w_anode13374w[] = ( (w_anode13374w[2..2] & (! w_data13267w[2..2])), (w_anode13374w[1..1] & (! w_data13267w[1..1])), (w_anode13374w[0..0] & (! w_data13267w[0..0])), w_anode13367w[1..1]);
	w_anode13385w[] = ( (w_anode13385w[2..2] & (! w_data13267w[2..2])), (w_anode13385w[1..1] & (! w_data13267w[1..1])), (w_anode13385w[0..0] & w_data13267w[0..0]), w_anode13367w[1..1]);
	w_anode13395w[] = ( (w_anode13395w[2..2] & (! w_data13267w[2..2])), (w_anode13395w[1..1] & w_data13267w[1..1]), (w_anode13395w[0..0] & (! w_data13267w[0..0])), w_anode13367w[1..1]);
	w_anode13405w[] = ( (w_anode13405w[2..2] & (! w_data13267w[2..2])), (w_anode13405w[1..1] & w_data13267w[1..1]), (w_anode13405w[0..0] & w_data13267w[0..0]), w_anode13367w[1..1]);
	w_anode13415w[] = ( (w_anode13415w[2..2] & w_data13267w[2..2]), (w_anode13415w[1..1] & (! w_data13267w[1..1])), (w_anode13415w[0..0] & (! w_data13267w[0..0])), w_anode13367w[1..1]);
	w_anode13425w[] = ( (w_anode13425w[2..2] & w_data13267w[2..2]), (w_anode13425w[1..1] & (! w_data13267w[1..1])), (w_anode13425w[0..0] & w_data13267w[0..0]), w_anode13367w[1..1]);
	w_anode13435w[] = ( (w_anode13435w[2..2] & w_data13267w[2..2]), (w_anode13435w[1..1] & w_data13267w[1..1]), (w_anode13435w[0..0] & (! w_data13267w[0..0])), w_anode13367w[1..1]);
	w_anode13445w[] = ( (w_anode13445w[2..2] & w_data13267w[2..2]), (w_anode13445w[1..1] & w_data13267w[1..1]), (w_anode13445w[0..0] & w_data13267w[0..0]), w_anode13367w[1..1]);
	w_data13267w[2..0] = data_wire[2..0];
END;
--VALID FILE
